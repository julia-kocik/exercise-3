{"version":3,"sources":["components/Quote.module.scss","redux/constants/quotesConstants.js","components/Quote.js","redux/actions/quotesActions.js","App.js","reportWebVitals.js","redux/store.js","redux/reducers/quotesReducer.js","index.js"],"names":["module","exports","GET_QUOTES_REQUEST","GET_QUOTES_SUCCESS","GET_QUOTES_FAIL","Container","connect","state","quotes","getQuotes","loading","error","dispatch","a","type","actionTypes","axios","get","data","payload","response","message","useState","quote","setQuote","prevQuote","value","ref","useRef","useEffect","current","usePrevious","window","scrollTo","className","styles","root","undefined","container","quote_box","author","button_box","onClick","random","Math","floor","length","randomQuote","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,WAAa,4B,iICD5FC,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAkB,kB,+CCc/B,IAyDMC,EAAYC,aAZM,SAAAC,GAAK,MAAK,CAChCC,OAAQD,EAAME,UAAUD,OACxBE,QAASH,EAAME,UAAUC,QACzBC,MAAOJ,EAAME,UAAUE,UAKE,SAACC,GAAD,MAAe,CACxCH,UAAW,kBAAMG,EClEM,uCAAM,WAAOA,GAAP,iBAAAC,EAAA,sEAE3BD,EAAS,CAAEE,KAAMC,IAFU,SAIJC,IAAMC,IAAN,yIAJI,gBAInBC,EAJmB,EAInBA,KAERN,EAAS,CACPE,KAAMC,EACNI,QAASD,IARgB,gDAW3BN,EAAS,CACPE,KAAMC,EACNI,QACE,KAAMC,UAAY,KAAMA,SAASF,KAAKG,QAClC,KAAMD,SAASF,KAAKG,QACpB,KAAMA,UAhBa,yDAAN,2DDqEPf,EAzDA,SAAC,GAAyC,IAAxCG,EAAuC,EAAvCA,UAAWD,EAA4B,EAA5BA,OAAQG,EAAoB,EAApBA,MAAOD,EAAa,EAAbA,QAC5C,EAA0BY,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAXR,SAAqBC,GACnB,IAAMC,EAAMC,mBAIZ,OAHAC,qBAAU,WACRF,EAAIG,QAAUJ,KAETC,EAAIG,QAMOC,CAAYR,GAC9BM,qBAAU,WACRG,OAAOC,SAAS,EAAE,GAClBxB,MACC,CAACA,IASJ,OACE,qBAAKyB,UAAWC,IAAOC,KAAvB,SACG1B,QAAuB2B,IAAZ3B,EACV,4CACEC,EACF,6BAAKA,IAEL,sBAAKuB,UAAWC,IAAOG,UAAvB,UACE,sBAAKJ,UAAWC,IAAOI,UAAvB,UACE,6BAAe,KAAVhB,EAAeA,EAAMA,MAAQf,EAAO,GAAGe,QAC5C,6BAAe,KAAVA,EAAeA,EAAMiB,OAAShC,EAAO,GAAGgC,YAE/C,sBAAKN,UAAWC,IAAOM,WAAvB,UACE,wBAAQC,QAhBQ,WACxBlB,GAAS,kBAAMC,MAeP,kBACA,wBAAQiB,QAtBU,WAC1B,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWnC,EAAOsC,QAC3CC,EAAcvC,EAAOmC,GAC3BnB,GAAS,kBAAMuB,MAmBP,6B,MEjCGC,MARf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,cAAC,EAAD,OCKSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCARQ,EAAUC,0BAAgB,CAC9BlD,UCN2B,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIqD,EAAW,uCACnD,OAAQA,EAAO9C,MACb,KAAKC,EACH,MAAO,CACLL,SAAS,EACTF,OAAQ,IAEZ,KAAKO,EACH,MAAO,CACLP,OAAQoD,EAAOzC,QACfT,SAAS,GAEb,KAAKK,EACH,MAAO,CACLP,QAAQ,EACRG,MAAOiD,EAAOzC,SAElB,QACE,OAAOZ,MDTPsD,EAAa,CAACC,KAWLC,EANDC,sBACZN,EAHoB,GAKpBO,8BAAoBC,kBAAe,WAAf,EAAmBL,KEZzCM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.4e38d734.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Quote_container__3g3LM\",\"quote_box\":\"Quote_quote_box__T5FVs\",\"button_box\":\"Quote_button_box__Gronz\"};","export const GET_QUOTES_REQUEST = 'GET_QUOTES_REQUEST';\r\nexport const GET_QUOTES_SUCCESS = 'GET_QUOTES_SUCCESS';\r\nexport const GET_QUOTES_FAIL = 'GET_QUOTES_FAIL';","import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {getQuotes} from '../redux/actions/quotesActions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Quote.module.scss';\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\n\r\nconst Component = ({getQuotes, quotes, error, loading}) => {\r\n  const [quote, setQuote] = useState('');\r\n  const prevQuote = usePrevious(quote);\r\n  useEffect(() => {\r\n    window.scrollTo(0,0);\r\n    getQuotes();\r\n  }, [getQuotes]);\r\n  const generateRandomQuote = () => {\r\n    const random = Math.floor(Math.random() * quotes.length);\r\n    const randomQuote = quotes[random];\r\n    setQuote(() => randomQuote);\r\n  };\r\n  const generatePrevQuote = () => {\r\n    setQuote(() => prevQuote);\r\n  };\r\n  return (\r\n    <div className={styles.root}>\r\n      {loading || loading === undefined ? (\r\n        <h2>Loading...</h2>\r\n      ) : error ? (\r\n        <h2>{error}</h2>\r\n      ) : (\r\n        <div className={styles.container}>\r\n          <div className={styles.quote_box}>\r\n            <h1>{quote !== '' ? quote.quote : quotes[0].quote}</h1>\r\n            <h3>{quote !== '' ? quote.author : quotes[0].author}</h3>\r\n          </div>\r\n          <div className={styles.button_box}>\r\n            <button onClick={generatePrevQuote}>Prev</button>\r\n            <button onClick={generateRandomQuote}>Next</button>\r\n          </div>   \r\n        </div>  \r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nComponent.propTypes = {\r\n  getQuotes: PropTypes.func,\r\n  className: PropTypes.string,\r\n  quotes: PropTypes.array,\r\n  loading: PropTypes.bool,\r\n  error: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  quotes: state.getQuotes.quotes,\r\n  loading: state.getQuotes.loading,\r\n  error: state.getQuotes.error,\r\n});\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getQuotes: () => dispatch(getQuotes()),\r\n});\r\n\r\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\r\n\r\nexport {\r\n  Container as Quote,\r\n  Component as QuoteComponent,\r\n};","import * as actionTypes from '../constants/quotesConstants';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const getQuotes = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: actionTypes.GET_QUOTES_REQUEST });\r\n\r\n    const { data } = await axios.get(`https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json`);\r\n\r\n    dispatch({\r\n      type: actionTypes.GET_QUOTES_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: actionTypes.GET_QUOTES_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};","import React from 'react';\nimport { Quote } from './components/Quote';\nimport './styles/global.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Quote/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// Reducers\r\nimport { quotesReducer } from './reducers/quotesReducer';\r\n\r\nconst reducer = combineReducers({\r\n  getQuotes: quotesReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\n\r\n\r\nconst INITIAL_STATE = {};\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  INITIAL_STATE,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import * as actionTypes from '../constants/quotesConstants';\r\n\r\nexport const quotesReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_QUOTES_REQUEST:\r\n      return {\r\n        loading: true,\r\n        quotes: [],\r\n      };\r\n    case actionTypes.GET_QUOTES_SUCCESS:\r\n      return {\r\n        quotes: action.payload,\r\n        loading: false,\r\n      };\r\n    case actionTypes.GET_QUOTES_FAIL:\r\n      return {\r\n        quotes: false,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport  store  from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}